// Code generated for package metadata by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../etc/thr-metadata.json
package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _EtcThrMetadataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\x1b\x37\x12\x7e\xcf\x5f\x31\xf0\x4b\x7b\x38\x59\x95\xa2\x3a\x75\xfb\x26\xcb\x4e\x53\xdb\x0a\x7a\x8e\x91\x06\x77\x3d\x08\xd4\x72\xb4\x3b\x27\x2e\xb9\x1d\x92\x92\xd5\xa2\xff\xfb\x61\xb8\xab\x1f\xfe\x71\x2b\x0b\x70\x02\xdc\xe1\x5e\x02\x65\x97\x5c\x73\xbe\x99\xf9\xbe\x6f\xf8\xc7\x2b\x80\x23\x55\x56\xfe\xe8\x07\xf8\xc7\x2b\x00\x80\x3f\xd2\xbf\xf5\xd3\xa3\x1f\xe0\x28\x33\xca\x7b\xca\x8e\x3a\xeb\xe7\x59\xa1\xac\x45\xb3\xdd\xb1\xbb\x6b\x77\x45\xbd\x1b\x95\xdd\xec\x4d\x6f\xad\x2a\x51\x5e\xdd\xbe\xbb\xe9\xf7\x46\x93\x73\x34\xf1\x0e\xef\x2f\x21\xeb\x2b\x62\xd4\x93\xe9\x4a\x56\xbe\x45\xab\x91\xe1\xa9\x95\x1a\x7d\xc6\x54\x05\x72\x56\x56\x0e\xc1\xb8\xe5\x71\xae\xc8\x42\xc5\xa8\xca\x0a\x66\x8e\xc1\x57\x8a\xe7\x86\x6c\x0e\xc3\x12\x99\x32\x65\x8f\x7d\x58\x19\x84\x74\x3a\xdf\x81\x25\x85\x02\xde\x5c\xbf\x81\x10\xa7\xe8\x81\x2c\x84\x02\xc1\xc5\x50\xc5\x00\x3e\xa8\x1c\xd3\x77\xa6\x4c\x79\x11\x2c\x7a\x0f\xca\x6a\x50\xe0\x03\x3b\x9b\x43\x49\x9a\x95\xcd\xb1\x7b\xb4\x39\xda\x9f\x9d\xfd\xd0\x70\xb4\x59\xd1\x82\xcd\xe4\x7c\x34\xe8\xb5\x02\x23\x0b\xe0\xeb\xb1\xd3\x1a\xf5\x5f\x5a\x81\xb9\xb8\x3e\xfd\x16\x2a\xb7\x44\xde\xc6\xa8\x20\x70\x44\x18\x49\x82\x8f\x87\x90\x39\x3b\xa3\x3c\xb2\x92\x3d\x35\x24\x0a\x0a\xca\x0b\xb3\x02\x46\x5f\x39\xeb\x69\x81\x70\xf1\xb7\x84\x05\x53\x56\x74\x20\x73\x65\x65\xf0\x0e\x0a\xc5\xa5\xb3\x94\x41\x70\x16\x6b\x74\x96\x8a\x4b\x70\x0b\x64\xcd\xb4\xc0\x2e\xfc\xd4\x1c\x1d\xa6\x2b\x38\x63\x0a\xe4\x0b\xc8\x0a\x2a\x0f\x44\xcd\xa0\xd2\xff\xc7\xec\x30\xcc\x0a\x9a\x48\x4b\xb4\xc1\x36\x76\x1a\xd9\xb6\x02\x37\x46\xaf\xe0\x3c\x2a\x03\x37\x98\x05\x9a\x11\x72\x2b\x7c\x3f\x0b\x72\xb3\x68\xa0\x4c\xdf\x06\x4d\x3e\x38\x4e\x40\x85\x42\x05\x98\x91\x31\x5e\x9a\x0c\x94\x4f\xfd\x26\xb8\xdd\xeb\x5d\xf2\x50\x45\x5f\xa0\xee\xc2\x2d\xa3\xd2\x90\x29\xc6\x59\x34\x66\x05\x6a\x16\x90\xa1\xff\x1a\xdc\x57\x99\x71\xd9\xfc\x30\x40\x7c\x85\x19\x29\xd3\x02\xc8\xa7\xc9\x19\xbb\xa5\xed\xb7\x22\x72\xf1\xf1\x1d\x9c\xf4\x4f\x06\x30\xaa\x3f\x0d\xaf\xe1\xeb\xf2\x19\x85\xd5\x7f\x3d\xfc\xf4\x5d\x4a\xf8\x3d\xce\xa9\x22\xfb\x48\x01\xdc\x2c\xc1\xf1\xeb\x51\x3a\xc2\xaf\x47\xe0\x5d\xb4\xba\x0b\x1f\x30\xa4\x17\x09\x22\xc5\xf2\x10\xfa\xfd\x35\x02\xa9\xc2\x1a\xb2\x06\x96\x07\x35\xc1\x74\x40\x9e\xb3\xb2\x73\xa0\x50\xd3\xa1\x0a\x52\xb1\xa8\x81\x8b\x55\x28\xca\xba\x00\x0f\x43\x70\xaa\xbc\x6f\xab\xa7\x33\xe5\xfd\xe4\x42\xa3\x9d\x8c\x15\x67\xd1\xb7\xe3\xa8\xd1\xc2\x37\x70\x4d\x21\x18\x84\xa7\x36\x3c\x00\xf0\x17\xe7\xf4\xaa\x03\x0b\xb2\x89\x9b\xe5\xfc\x75\xf3\x19\x15\x10\xa6\x8c\x6a\x1e\xab\xc3\x02\x52\x99\x8b\x3e\xec\xe8\xdc\x13\x41\x0d\x33\x37\x19\x39\xab\xd1\x7a\xe4\xf6\xd2\xd8\x2c\x83\xf1\xc3\x6f\x3e\x88\xe5\x1c\x3d\xe5\x16\x75\x4a\xcd\xfa\x14\xc7\x68\x30\x0b\x4c\x19\xe4\x91\x82\xe2\x4e\x6a\xa2\x24\x61\x52\x01\x0d\xb5\xa0\x94\x8a\x82\xa9\x8b\x81\x7e\x8b\x28\x6c\xd4\xfc\xd1\x92\x32\x76\x55\xe1\xec\x81\x4c\x31\x33\x2a\xb4\x21\xf0\xf6\xd1\xfb\x07\x71\xbf\x1f\xb6\x06\xfb\x7e\xb8\x73\x9c\xe6\xd7\x3f\x5f\xed\x1c\xee\xa1\xfb\x58\xc7\xf6\xd9\xec\xc7\xd9\x65\xb4\xe4\xf8\xf5\x73\x0c\xc8\x99\x89\xe8\xe1\x92\x9f\x27\x1f\xb5\x17\x59\xaa\x10\xe0\xe2\x7a\xf0\x2d\xe8\x94\xe8\x2e\xdc\x46\xb6\x92\xc8\x58\xa5\x5c\x36\x5c\x97\x9a\x7a\x49\xc6\x40\x28\x28\x9b\xa3\x5d\xbf\x5f\x7b\x94\x50\xa0\x4d\x74\x08\x64\x83\x83\xa9\x9c\x65\xb5\x23\x16\x2f\xeb\x3d\x46\x93\x31\x59\x6a\x17\xd2\x9b\xbf\x83\x2c\x7a\x1e\xe7\x0d\x41\x63\x86\x55\xa0\x05\x9a\x15\x78\x12\x0d\x04\x09\x3c\x23\xce\x84\xf5\x52\xff\xfe\x2b\xfa\x20\xbe\x8a\x6c\x6e\x10\xb6\x3c\x29\x52\xdc\x85\x21\x08\xf9\x77\xc0\xba\xe3\x19\x27\xf5\x48\x9d\x9f\xd4\x84\xfc\x13\xba\x1b\x1c\x54\x94\xcd\x05\x6d\xbd\xb2\xaa\xa4\xec\x40\x9a\x6b\x75\x1b\x83\xde\xe4\xcc\x38\xab\xa9\xdd\xbd\x8e\x15\xfb\x42\x19\x03\xfd\xef\x4f\xbf\xfb\x04\x27\xbd\x5f\xe0\x67\x83\x77\xf4\xdc\x2a\x5a\x20\x7b\x11\xcd\x46\x16\x46\x35\xc5\x7f\x73\x9d\x04\xb1\x06\x2f\xd1\x83\x28\x72\xcd\x22\x78\x17\x58\xad\x2b\x2a\x59\x12\xad\x78\x2e\x36\x46\xe0\x12\x3c\x7d\xe6\x5c\x85\x5a\x9c\xeb\x81\x88\xec\xf3\x12\x83\xde\xe4\xed\xf5\x23\xd4\x1e\x40\xf2\x51\x31\xb9\x3d\x1c\x7f\x31\x1a\x9d\x0e\x7c\x5d\xec\x6f\xae\xdf\xf8\x14\x99\xa4\xf8\x5e\x60\x4f\x79\xad\x0e\xd0\x8e\x6f\xfa\x11\xb9\x54\x16\xd0\xe6\x64\x11\x99\x6c\xfe\xf2\x5e\xe1\x83\x8b\xa1\x68\x8d\xf8\xea\x66\xf8\xfe\x0a\xae\x44\x86\xd1\xfa\x80\x64\x9f\x97\xfe\xb7\x2e\x72\xd3\x07\x0d\x51\xac\xed\x42\x0d\xcb\x7a\x48\x49\x4f\xbb\x70\x2b\x03\x4a\x07\x66\xca\x07\x08\xac\xea\xd2\x4f\xc6\x80\xa3\x2f\xe4\x3f\x02\x98\x00\xd8\x85\x97\xd7\x7b\x71\x88\x7b\x2d\x64\x7b\xb8\xa9\xbf\x1b\xc3\xb8\x6d\xee\xa4\xe8\x4d\xd0\x0a\x66\xf1\xf7\xdf\x8f\x0d\xcd\x71\xcb\x7e\xb0\x5c\xb3\x23\x6a\x31\xd6\xfa\xf3\x88\xff\x6d\x9c\x62\xbb\xee\xcb\x8a\x2f\x29\xf9\x92\xf7\xff\x1d\xb5\x2f\xef\x4f\x21\x2f\xa9\xf5\x83\xde\x64\xa4\xb8\xc4\xf6\x19\xa7\x5e\x02\x3f\x16\xd4\x5e\xa7\xc3\x4d\x06\x3a\xbb\x2a\x7f\xba\x56\xf9\xba\x6c\x95\xd6\x3e\x49\xd6\xe6\xca\xc0\x47\x1f\x92\x7b\xaf\x27\x9e\x52\x79\x19\x63\x16\xce\xc4\x12\x45\xc2\x42\x64\xa9\x8b\x58\x89\xd8\xe5\x8c\x2a\x40\xa9\x42\x56\xa4\x4a\xb1\x98\xcd\x93\x9e\xc5\xea\x40\xd2\xde\x23\xf7\x83\xde\xe4\xc3\x4d\xbf\xd7\x5e\xd9\x43\x99\x9b\x25\x86\xc7\x13\xf6\x23\x70\x4a\xd2\xc7\x4d\x50\x9b\x4a\x6d\x80\xa9\xaf\x5a\x4e\x4e\x7a\xbb\x93\x75\x17\xae\xc9\x07\xb4\x29\xcc\x20\x1c\x06\x42\x38\xdb\xa2\x6f\xae\x5b\x48\x48\x3c\x5f\xa3\xf8\xb2\x17\x07\x32\x5f\xb7\x02\xf0\xce\x05\xe0\x44\xd9\x70\x39\x1a\x9f\xf6\xf6\x81\xb0\x1d\x67\x77\x43\x4f\x5c\xde\x50\x99\xd8\x42\xdf\xa9\x83\x2e\x70\x87\xef\x34\xce\x48\xea\xa0\xff\xfd\x69\xcf\x27\x3e\xab\x27\x3a\x81\xa1\x40\xb5\x58\x41\x89\x41\x99\x97\xbe\x05\x68\x86\xde\x76\x2f\xfc\x68\xe8\x1d\x3c\xd7\x00\x4e\x9d\xf3\x32\x75\xfe\x07\x43\xf3\xa1\x16\x5a\x31\x85\xcd\x8d\x1c\x2e\xd0\x42\xe9\xb8\x19\x79\x13\x5b\xe6\x39\xa3\x4f\x42\x5f\x0f\xaf\x5e\xc6\x5b\x8f\x4a\x84\x1d\x24\xc7\x07\xb6\xc6\x3e\x79\x97\xde\x08\xa8\xcc\x1e\x7d\x3f\x4b\xb1\xf1\xc6\xcd\xfe\x15\x04\xa7\x66\x27\x64\x1b\xa8\x4a\xa7\xf7\xa0\xb4\x1e\xe1\xb7\xda\xb6\xfe\xe6\x14\x67\x82\xc5\xce\xd0\x90\x5a\x05\xad\x4f\x1c\x34\x63\xfc\x2d\xa2\xcd\x56\xf7\xdb\xa6\x62\xb7\x20\x8d\xfe\x01\x9a\x5d\xf8\x49\xa3\x32\x6b\xbf\x28\x03\x8e\x3e\x4e\xb7\x98\x8d\xfe\xbc\xe4\x85\xc0\xa0\x37\xb9\xbc\x12\x8b\xd0\x5e\x5a\x97\x57\x5f\x49\x3a\x29\x27\xab\x8c\x30\x00\x6a\x70\x16\x36\x06\xba\x01\xa2\xdd\x37\x7e\x6c\x2e\x05\x16\x8e\x32\xa9\x89\xba\x92\x14\x9b\xd5\xfa\x62\x20\xc5\xbc\x85\x37\x75\xdc\xd2\xf1\xdc\xc3\x12\x8d\xa9\x37\x24\xfa\x71\xdc\x60\xf1\x79\xdc\xc4\x79\x3d\x92\xb4\xd3\x6e\xb3\xe8\x4b\x7a\x8a\x66\x54\xfa\x6f\xb4\x15\xaf\xe4\xd7\x9f\xff\x0e\x00\x00\xff\xff\xae\x63\x76\x48\xd5\x18\x00\x00")

func EtcThrMetadataJsonBytes() ([]byte, error) {
	return bindataRead(
		_EtcThrMetadataJson,
		"../../etc/thr-metadata.json",
	)
}

func EtcThrMetadataJson() (*asset, error) {
	bytes, err := EtcThrMetadataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../etc/thr-metadata.json", size: 6357, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../etc/thr-metadata.json": EtcThrMetadataJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"etc": &bintree{nil, map[string]*bintree{
				"thr-metadata.json": &bintree{EtcThrMetadataJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
