syntax = "proto3";

package thrl6p;

option go_package = "api/v1";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";
import "validator.proto";

service PatchService {
  rpc CreatePatch (CreatePatchRequest) returns (Patch) {
    option (google.api.http) = {
      post: "/api/patch",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Uploads a new patch."
    };
  }

  rpc GetPatch (GetPatchRequest) returns (Patch) {
    option (google.api.http) = {
      get: "/api/patch/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Gets a patch with associated metadata."
    };
  }

  rpc ListPatch(ListPatchesRequest) returns (PatchList) {
    option (google.api.http) = {
      get: "/api/patch"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Lists patches."
    };
  }

  rpc ValidateName (ValidateNameRequest) returns (NameValidation) {
    option (google.api.http) = {
      post: "/api/patch/validate/name",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Validate a patch name."
    };
  }

  rpc Metadata(google.protobuf.Empty) returns (Meta) {
    option (google.api.http) = {
      get: "/api/patch/metadata"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Metadata for the patch properties."
    };
  }
}

message CreatePatchRequest {
  string patch = 1 [(validator.field) = {string_not_empty: true}];
  string description = 2 [(validator.field) = {length_lt: 1024}];
}

message Patch {
  string id = 1;
  string fingerprint = 2;
  string patch = 3;
  string name = 4;
  string description = 5;
  string permalink = 6;
}

message GetPatchRequest {
  string id = 1 [(validator.field) = {string_not_empty: true}];
}

message ListPatchesRequest {
  string filter = 1;
  int32 pageSize = 2;
  int32 page = 3;
}

message PatchList {
  repeated Patch patches = 1;
}

message ValidateNameRequest {
  string name = 1 [(validator.field) = {string_not_empty: true}];
}

message NameValidation {
  bool ok = 1;
  string reason = 2;
}

message Meta {
  repeated AmpMeta amps = 1;
}

message AmpMeta {
  enum Amp {
    UNKNOWN_AMP_GROUP = 0;
    CLASSIC = 1;
    BOUTIQUE = 2;
    MODERN = 3;
  }
  Amp amp = 1;
  repeated ChannelMeta channels = 2;
}

message ChannelMeta {
  enum Channel {
    UNKNOWN_CHANNEL = 0;
    CLEAN = 1;
    CRUNCH = 2;
    LEAD = 3;
    HI_GAIN = 4;
    SPECIAL = 5;
    BASS = 6;
    ACOUSTIC = 7;
    FLAT = 8;
  }
  Channel channel = 1;
  string name = 2;
  string inspired_by = 3;
  string description = 4;
}
